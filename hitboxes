local libraryUrl = "https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/turtle"
local success, libFunction = pcall(loadstring, game:HttpGet(libraryUrl))
if not success then
	return
end
local library = libFunction()

local headUI = library:Window("Head Hitboxes")
local expanderUI = library:Window("Torso Hitboxes")

local headToggleKey = Enum.KeyCode.G
local expanderToggleKey = Enum.KeyCode.H

headUI:Box("Toggle Keybind", function(text, focuslost)
	if focuslost then
		local keyName = string.upper(text)
		local key = Enum.KeyCode[keyName]
		if key then
			headToggleKey = key
		end
	end
end)

expanderUI:Box("Keybind", function(text, focuslost)
	if focuslost then
		local keyName = string.upper(text)
		local key = Enum.KeyCode[keyName]
		if key then
			expanderToggleKey = key
		end
	end
end)

local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")

_G.HeadHitboxSize = 10
_G.HeadHitboxTransparency = 50 / 100
_G.HitboxesEnabled = false
_G.TeamCheckEnabled = false

local originalHeadProperties = {}

headUI:Toggle("Toggle", false, function(state)
	_G.HitboxesEnabled = state
end)

headUI:Slider("Hitbox Size", 5, 50, 10, function(value)
	_G.HeadHitboxSize = value
end)

headUI:Slider("Hitbox Transparency", 0, 100, 50 / 100, function(value)
	_G.HeadHitboxTransparency = value / 100
end)

headUI:Toggle("Team Check", false, function(state)
	_G.TeamCheckEnabled = state
end)

UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
	if gameProcessedEvent then return end
	if input.KeyCode == headToggleKey then
		_G.HitboxesEnabled = not _G.HitboxesEnabled
	end
end)

local function restoreHead(head)
	if originalHeadProperties[head] then
		pcall(function()
			head.Size = originalHeadProperties[head].Size
			head.Transparency = originalHeadProperties[head].Transparency
			head.BrickColor = originalHeadProperties[head].BrickColor
			head.Material = originalHeadProperties[head].Material
			head.CanCollide = originalHeadProperties[head].CanCollide
			head.Massless = originalHeadProperties[head].Massless

			if originalHeadProperties[head].mesh then
				local meshInfo = originalHeadProperties[head].mesh
				if not head:FindFirstChildWhichIsA("SpecialMesh") then
					local newMesh = Instance.new("SpecialMesh")
					newMesh.Scale = meshInfo.Scale
					newMesh.MeshType = meshInfo.MeshType
					newMesh.TextureId = meshInfo.TextureId
					newMesh.Parent = head
				end
			end
		end)
		originalHeadProperties[head] = nil
	end
end

RunService.RenderStepped:Connect(function()
	for _, player in ipairs(Players:GetPlayers()) do
		if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") then
			local head = player.Character.Head
			if _G.TeamCheckEnabled and player.Team == LocalPlayer.Team then
				restoreHead(head)
			else
				if _G.HitboxesEnabled then
					if not originalHeadProperties[head] then
						originalHeadProperties[head] = {
							Size = head.Size,
							Transparency = head.Transparency,
							BrickColor = head.BrickColor,
							Material = head.Material,
							CanCollide = head.CanCollide,
							Massless = head.Massless,
							mesh = nil
						}
						local specialMesh = head:FindFirstChildWhichIsA("SpecialMesh")
						if specialMesh then
							originalHeadProperties[head].mesh = {
								Scale = specialMesh.Scale,
								MeshType = specialMesh.MeshType,
								TextureId = specialMesh.TextureId
							}
							specialMesh:Destroy()
						end
					end
					pcall(function()
						head.Size = Vector3.new(_G.HeadHitboxSize, _G.HeadHitboxSize, _G.HeadHitboxSize)
						head.Transparency = _G.HeadHitboxTransparency
						if player.TeamColor then
							head.BrickColor = player.TeamColor
						else
							head.BrickColor = BrickColor.new("White")
						end
						head.Material = Enum.Material.Neon
						head.CanCollide = false
						head.Massless = true
					end)
				else
					restoreHead(head)
				end
			end
		end
	end
end)

_G.Expander_HeadSize = 10
_G.Expander_HeadTransparency = 50 / 100
_G.Expander_Enabled = false
_G.ExpanderTeamCheckEnabled = false

local originalPropsExpander = {}

expanderUI:Toggle("Toggle", false, function(toggleEnabled)
	_G.Expander_Enabled = toggleEnabled
end)

expanderUI:Slider("Hitbox Size", 5, 50, 10, function(value)
	_G.Expander_HeadSize = value
end)

expanderUI:Slider("Hitbox Transparency", 0, 100, 50 / 100, function(value)
	_G.Expander_HeadTransparency = value / 100
end)

expanderUI:Toggle("Team Check", false, function(state)
	_G.ExpanderTeamCheckEnabled = state
end)

UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
	if gameProcessedEvent then return end
	if input.KeyCode == expanderToggleKey then
		_G.Expander_Enabled = not _G.Expander_Enabled
	end
end)

local function captureOriginalProps(part)
	return {
		Size = part.Size,
		Transparency = part.Transparency,
		BrickColor = part.BrickColor,
		Material = part.Material,
		CanCollide = part.CanCollide
	}
end

RunService.RenderStepped:Connect(function()
	for _, player in pairs(Players:GetPlayers()) do
		if player ~= LocalPlayer and player.Character then
			pcall(function()
				local character = player.Character
				local hrp = character:FindFirstChild("HumanoidRootPart")
				local humanoid = character:FindFirstChildOfClass("Humanoid")
				if hrp and humanoid then
					if humanoid.Sit then
						if originalPropsExpander[player.UserId] then
							local props = originalPropsExpander[player.UserId]
							hrp.Size = props.Size
							hrp.Transparency = props.Transparency
							hrp.BrickColor = props.BrickColor
							hrp.Material = props.Material
							hrp.CanCollide = props.CanCollide
							originalPropsExpander[player.UserId] = nil
						end
						return
					end

					if _G.ExpanderTeamCheckEnabled and player.Team == LocalPlayer.Team then
						if originalPropsExpander[player.UserId] then
							local props = originalPropsExpander[player.UserId]
							hrp.Size = props.Size
							hrp.Transparency = props.Transparency
							hrp.BrickColor = props.BrickColor
							hrp.Material = props.Material
							hrp.CanCollide = props.CanCollide
							originalPropsExpander[player.UserId] = nil
						end
					else
						if _G.Expander_Enabled then
							if not originalPropsExpander[player.UserId] then
								originalPropsExpander[player.UserId] = captureOriginalProps(hrp)
							end
							hrp.Size = Vector3.new(_G.Expander_HeadSize, _G.Expander_HeadSize, _G.Expander_HeadSize)
							hrp.Transparency = _G.Expander_HeadTransparency
							if player.TeamColor then
								hrp.Color = player.TeamColor.Color
							else
								hrp.Color = Color3.new(1, 1, 1)
							end
							hrp.Material = Enum.Material.Neon
							hrp.CanCollide = false
						else
							if originalPropsExpander[player.UserId] then
								local props = originalPropsExpander[player.UserId]
								hrp.Size = props.Size
								hrp.Transparency = props.Transparency
								hrp.BrickColor = props.BrickColor
								hrp.Material = props.Material
								hrp.CanCollide = props.CanCollide
								originalPropsExpander[player.UserId] = nil
							end
						end
					end
				end
			end)
		end
	end
end)
